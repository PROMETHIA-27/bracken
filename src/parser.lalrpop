use std::str::FromStr;

use crate::Db;
use crate::ast::{File, FnDef, Expr, ExprList, ExprKind, Name, SourceFile, Stmt, Stmts};

grammar(source: SourceFile, db: &dyn Db);

pub File: File = <defs:FnDef*> => File::from_defs(db, source.clone(), defs);

pub FnDef: FnDef = 
    "function" <name:Ident> "(" <params:Comma<(<Ident> ":" <Ident>)>> ")" <return_type:("->" <Ident>)?> 
        <body:Stmts> 
    "end" => 
        FnDef::new(db, name, body, params, return_type);

pub Stmts: Stmts = <Stmt*> => Stmts::new(db, <>);

pub Stmt: Stmt = {
    <Expr> => Stmt::Expr(<>),
}

pub Expr: Expr = AssignExpr;

pub AssignExpr: Expr = {
    <l:@L> "let" <name:Ident> <ty:(":" <Ident>)?> "=" <value:AssignExpr> <r:@R> => 
        Expr::new(db, ExprKind::Let { name, ty, value }, l..r),
    <l:@L> <name:Ident> "=" <value:AssignExpr> <r:@R> => 
        Expr::new(db, ExprKind::Set { name, value }, l..r),
    ValueExpr,
}

pub ValueExpr: Expr = {
    <l:@L> <lhs:ValueExpr> "+" <rhs:Term> <r:@R> => Expr::new(db, ExprKind::Plus(lhs, rhs), l..r),
    <l:@L> <lhs:ValueExpr> "-" <rhs:Term> <r:@R> => Expr::new(db, ExprKind::Minus(lhs, rhs), l..r),
    Term,
}

pub Term: Expr = {
    <l:@L> <lhs:Term> "*" <rhs:Factor> <r:@R> => Expr::new(db, ExprKind::Times(lhs, rhs), l..r),
    Factor,
}

pub Factor: Expr = {
    Return,
    While,
    Break,
    <l:@L> <callee:Factor> "(" <params:Comma<Expr>> ")" <r:@R> => Expr::new(db, ExprKind::Call { 
        callee, 
        params: ExprList::new(db, params),
    }, l..r),
    <l:@L> <lit:Literal> <r:@R> => Expr::new(db, ExprKind::Literal(lit), l..r),
    <l:@L> <ident:Ident> <r:@R> => Expr::new(db, ExprKind::Name(ident), l..r),
    "{" <Expr> "}" => <>,
}

pub Return: Expr =
    <l:@L> "return" "(" <value:Expr?> ")" <r:@R>  => 
        Expr::new(db, ExprKind::Return(value), l..r);

pub While: Expr = 
    <l:@L> "while" <pred:Expr> <body:Stmts> "end" <r:@R> => 
        Expr::new(db, ExprKind::While { pred, body }, l..r);

pub Break: Expr = {
    <l:@L> "break" <r:@R> => Expr::new(db, ExprKind::Break(None), l..r),
}

pub Literal: i32 = <r"[0-9]+"> => i32::from_str(<>).unwrap();

pub Ident: Name = {
    <r"[a-zA-Z][_a-zA-Z0-9]*"> => Name::new(db, <>.to_string()),
    <r"[0-9]+[a-zA-Z][_a-zA-Z0-9]*"> => Name::new(db, <>.to_string()),
}

Comma<T>: Vec<T> = {
    <mut list:(<T> ",")*> <last:T?> => {
        if let Some(value) = last {
            list.push(value);
        }
        list
    }
}