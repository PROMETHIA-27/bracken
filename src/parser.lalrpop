use std::cell::RefCell;
use std::str::FromStr;

use crate::arena::{IndexedArena, Id};
use crate::ast::{IFile, IFnDef, IExpr, IStmt, IStmts};

grammar(arena: &RefCell<IndexedArena<IExpr>>);

pub File: IFile = <defs:FnDef*> => IFile::new(defs);

pub FnDef: IFnDef = 
    "function" <name:Ident> "()" <body:Stmts> "end" => IFnDef::new(name, body);

pub Stmts: IStmts = <Stmt*> => IStmts::new(<>);

pub Stmt: IStmt = {
    <Expr> => IStmt::Expr(<>),
}

pub Expr = AssignExpr;

pub AssignExpr: Id<IExpr> = {
    "let" <name:Ident> <ty:(":" <Ident>)?> "=" <value:AssignExpr> => arena.borrow_mut().push(IExpr::Let { name, ty, value }),
    <name:Ident> "=" <value:AssignExpr> => arena.borrow_mut().push(IExpr::Set { name, value }),
    ValueExpr,
}

pub ValueExpr: Id<IExpr> = {
    <l:ValueExpr> "+" <r:Term> => arena.borrow_mut().push(IExpr::Plus(l, r)),
    <l:ValueExpr> "-" <r:Term> => arena.borrow_mut().push(IExpr::Minus(l, r)),
    Term,
}

pub Term: Id<IExpr> = {
    <l:Term> "*" <r:Factor> => arena.borrow_mut().push(IExpr::Times(l, r)),
    Factor,
}

pub Factor: Id<IExpr> = {
    Return,
    While,
    Break,
    <Literal> => arena.borrow_mut().push(IExpr::Literal(<>)),
    <Ident> => arena.borrow_mut().push(IExpr::Local(<>)),
    "(" <Expr> ")" => <>,
}

pub Return: Id<IExpr> =
    "return" "(" <value:Expr?> ")" => arena.borrow_mut().push(IExpr::Return(value));

pub While: Id<IExpr> = 
    "while" <pred:Expr> <body:Stmts> "end" => arena.borrow_mut().push(IExpr::While { pred, body });

pub Break: Id<IExpr> = {
    "break" => arena.borrow_mut().push(IExpr::Break(None)),
}

pub Literal: i32 = <r"[0-9]+"> => i32::from_str(<>).unwrap();

pub Ident: String = {
    <r"[a-zA-Z][_a-zA-Z0-9]*"> => <>.to_string(),
    <r"[0-9]+[a-zA-Z][_a-zA-Z0-9]*"> => <>.to_string(),
}